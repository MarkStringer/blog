#SAFE (Scaled Agile Framework) – 7 Pros (and 7 Cons)
##Pro – The Name
[SAFE]( http://www.scaledagileframework.com/) is called SAFE.  This is marketing genius for a couple of reasons.  First of all, nobody wants to admit to not being SAFE – because that would be "unsafe." Also, if you are doing SAFE – well, then that's safe. Right? Finally SAFE's longer name is Scaled Agile Framework, which makes clear that SAFE is Agile – and that it's scaled.  These are good things.
##Con – The Name
SAFE creates the impression – no matter how subliminal - that if you do SAFE, you'll be safe.  Of course there's no guarantee of this at all. An organisation could follow all the practices within the SAFE framework and either succeed or fail.
##Pro – Kanban then Scrum
The basic SAFE idea, of an Enterprise level Kanban board, which is then broken down into a program-level Kanban boards (for some reason called a "Release Train") – which then use Scrum at the team level is a good idea.  I've seen this work – the main thing that this approach answers is how an Enterprise can do "High Level Planning" – without trying to make plans work with Scrum.
##Pro – Architectural Epics
At the Enterprise level, not all development that is done has direct value to customers.  Some things need to be done to improve the architectural estate, to ease the overall management of enterprise's applications. These things need to be prioritised by a senior architect rather than a product owner, and then managed and developed in much the same way as business Epics. It's important to acknowledge (i.e. fund) this at the Enterprise level rather than hide it amongst business functionality.
##Con – Now Buy Our Training
SAFE training is expensive to attend (e.g. £2000 the SAFE Program Consultant Course) and expensive to maintain (an addition £900 per year for SPC). There are [5 different levels of SAFE certification]( http://scaledagileacademy.site-ym.com/?page=WhichCertification). It would seem that selling SAFE training is clearly a fundamental part of Leffingwell's business model, yet, curiously, there aren't that many courses currently running – with only one planned in London this year, indicating that the model might not be working that well.
##Pro – Architectural Runway
One way of thinking about [Architectural Runway]( http://www.scaledagileframework.com/architectural-runway/) is that some projects need to start with a series of architectural epics before any business epics are developed. This might be thought to be counter to an Agile idea of delivering software valuable to the user at the end of every development iteration – but it also reflects the reality of a lot of enterprise projects – some architecture needs to be in place before business development can start.

##Con – Light on Practical Detail (and "Shu")
Sometimes when people talk about acquiring proficiency in Agile practice they talk about the Japanese concept of [Shu-Ha-Ri]( http://en.wikipedia.org/wiki/Shuhari). "Shu" is a stage in proficiency where the learner obeys the rules. "Ha" is a stage where the learner understands when to break the rules. "Ri" is a stage where the learner forgets the old rules and makes new ones.
The huge appeal of the most successful Agile methodology – Scrum – is that it is very strong and clear on the "Shu" aspect of acquisition.  Scrum gives any organisation a clear set of roles, meetings and artefacts to implement to get started. SAFE doesn't really do this.
##Pro – The Diagram
Dean Leffingwell is clear that he's spent a lot of money (and in the spirit of Agile, iterations – current version of SAFE is 3.0) on visually representing the idea of SAFE with the help of professional graphic designers.  Some Agile advocates are a bit sceptical about this, but it's becoming obvious that the online diagram – and it's use as a way of indexing more detailed concepts is an attractive aspect of the SAFE approach. It's also a big differentiator between SAFE and other Enterprise Agile frameworks put forward by [Craig Lahrman]( http://www.craiglarman.com/wiki/index.php?title=Book_-_Scaling_Lean_and_Agile_-_Thinking_and_Organizational_Tools) or [Scott W. Ambler]( http://en.wikipedia.org/wiki/Disciplined_agile_delivery) which don't have an accessible diagram and haven't captured the imagination. 

The diagram is accessible and draws people into discussion of SAFE.  Making the diagram on the SAFE website a clickable map also allows people who visit the site to explore SAFE in more detail.
##Con – The Diagram looks a bit Waterfall
One worry about the diagram is that it doesn't look very Agile. The fundamental idea behind Agile approaches to software development is "Empirical" process.  Plan, Do, Check, Act (PDCA) and Orient, Observe, Decide, Act (OODA). One of the most obvious features of diagrams of these approaches is that they have arrows showing loops back from the end of the process to the beginning.  They are processes which involve *iteration* and *feedback*.
These indications that development is an iterative process and feedback arrows are absent from the SAFE diagram, although acknowledgement of development being an iterative and incremental process is very much acknowledged in the accompanying text.
There is however, a danger of interpreting the diagram as being a depiction of a process which moves in just one direction.
##Pro – Better than nothing
One of the main reasons that people are talking about SAFE is that there really isn't anything else occupying that space. The combination of the diagram, the name, and the fundamentally sound idea of enterprise-level Kanban which devolves down to development using Scrum means that it's getting traction at least in the headspace of senior managers.
From the point of view of suppliers, this can't really be a bad thing, because it provides a common frame of reference for discussion of these issues with clients – and there are no really good reasons for not adopting something very like SAFE as an approach to managing Agile software development at the Enterprise level.
##Con – No Feedback Loops
"The disease of Software development is optimism – feedback is the cure" said Kent Beck, the author of ["Extreme Programming Explained"]( http://www.amazon.co.uk/gp/product/0321278658?ie=UTF8&camp=3194&creative=21330&creativeASIN=0321278658&linkCode=shr&tag=theginmum-21&linkId=RQG4WNU3PPRRNWVR&qid=1422457783&sr=8-1&keywords=extreme+programming+explained). Feedback is missing from the SAFE diagram at the Enterprise Kanban level and there is little in the accompanying text to explain how that feedback will be provided and how it will be used facilitate strategic decisions and modify future work which is scheduled for development. In Scrum, how these feedback loops work is made explicit, yet it is still the most problematic and poorly adopted aspect of the methodology. 
**The absence of feedback loops at the Enterprise level in SAFE is a grave concern.  SAFE will not work in any real-world enterprise without this problem being addressed.** 
##Pro – Hypnotic Effect on CXO's
SAFE is Agile pitched at the level of CDO's, CTO's, CEO's, COO's. SAFE to some degree at least, talks the language of the senior management in organisations and this is resulting in C-level executives suggesting to their lead architects, and Agile coaches to look as SAFE and even suggesting that it be widely adopted through their organisations. SAFE is creating pressure from the very top for adoption of an Agile methodology which include SCRUM, and for those of us who have been trying to persuade senior management of the value of Agile as an approach to development, surely that's no bad thing.
##Con – Hypnotic Effect on CXO's
But.  And it's a moderate-sized but. The details of how SAFE would work in any given program or enterprise need to be worked out in every case – in every case they will be different. The paths for feedback between the team level, the portfolio level and the programme level need to be established and the effects of the feedback that is communicated along those paths needs to be managed.  We know from our experience only at the Scrum team level that the content of this feedback is often hard for senior management and C-Level executives to take.
